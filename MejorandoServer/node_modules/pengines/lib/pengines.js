// Generated by CoffeeScript 1.9.1

/*
    Copyright (c) 2014, TorbjÃ¶rn Lager
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Modified by Karl Lundfall, 2015.
 */

(function() {
  var Pengine, events, request, s,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  request = require('request');

  s = require('string');

  events = require('events');

  Pengine = (function(superClass) {
    extend(Pengine, superClass);

    Pengine.ids = [];

    function Pengine(options) {
      this.next = bind(this.next, this);
      var createOptions, key, value;
      if (options.format == null) {
        options.format = "json";
      }
      if (options.server == null) {
        options.server = "/pengine";
      }
      this.format = options.format, this.server = options.server, this.cookieJar = options.cookieJar;
      createOptions = {};
      for (key in options) {
        value = options[key];
        if ((key === 'format' || key === 'sourceText' || key === 'application' || key === 'ask' || key === 'template' || key === 'chunk') || (key === 'destroy' && typeof value === 'boolean')) {
          createOptions[key] = value;
        }
      }
      createOptions.breakpoints = [];
      createOptions.src_text = createOptions.sourceText;
      delete createOptions.sourceText;
      request({
        url: this.server + '/create',
        json: true,
        body: createOptions,
        method: "POST",
        jar: this.cookieJar
      }, (function(_this) {
        return function() {
          var error, response;
          error = arguments[0], response = arguments[arguments.length - 1];
          if (error) {
            return _this.emit('error', {
              data: "Failed to connect to " + _this.server + ": " + error
            });
          }
          return _this._processResponse(response);
        };
      })(this));
    }

    Pengine.optionsToList = function(options) {
      var key, value;
      return '[' + ((function() {
        var results;
        results = [];
        for (key in options) {
          value = options[key];
          results.push(key + '(' + value + ')');
        }
        return results;
      })()) + ']';
    };

    Pengine.prototype._processResponse = function(obj) {
      switch (obj.event) {
        case 'create':
          this.id = obj.id;
          Pengine.ids.push(this.id);
          if (Pengine.ids.length > obj.slave_limit) {
            this.destroy();
            obj.data = "Attempt to create too many pengines. The limit is: " + obj.slave_limit;
            obj.code = "too_many_pengines";
            this.emit('error', obj);
            return console.error(obj.data);
          } else {
            this.emit('create', obj);
            if (obj.answer != null) {
              return this._processResponse(obj.answer);
            }
          }
          break;
        case 'stop':
          return this.emit('stop', obj);
        case 'success':
          return this.emit('success', obj);
        case 'failure':
          return this.emit('failure', obj);
        case 'error':
          if (obj.code === "existence_error" && obj.arg1 === "pengine" && obj.arg2 === this.id) {
            this._unregister;
          }
          this.emit('error', obj);
          return console.error(obj.data);
        case 'output':
          this.emit('output', obj);
          return this._pullResponse(obj.id);
        case 'debug':
          this.emit('debug', obj);
          console.log("[debug]: " + obj.data);
          return this._pullResponse(obj.id);
        case 'prompt':
          return this.emit('prompt', obj);
        case 'abort':
          this.aborted = true;
          return this.emit('abort', obj);
        case 'destroy':
          this._unregister();
          if (obj.data) {
            this._processResponse(obj.data);
          }
          return this.emit('destroy', obj);
        case 'died':
          this._unregister;
          if (!this.aborted) {
            obj.data = "Pengine has died";
            obj.code = "died";
            this.emit('error', obj);
            return console.error(obj.data);
          }
          break;
        default:
          return this._processResponse({
            event: 'error',
            data: obj
          });
      }
    };

    Pengine.prototype._processPullResponse = function(obj) {
      if (obj.event !== 'died') {
        return this._processResponse(obj);
      }
    };

    Pengine.prototype.send = function(event) {
      request({
        url: this.server + "/send",
        method: "POST",
        json: true,
        form: {
          id: this.id,
          event: event,
          format: this.format
        },
        jar: this.cookieJar
      }, (function(_this) {
        return function() {
          var response;
          response = arguments[arguments.length - 1];
          return _this._processResponse(response);
        };
      })(this));
      return this;
    };

    Pengine.prototype._unregister = function() {
      var index;
      index = Pengine.ids.indexOf(this.id);
      if (index > -1) {
        Pengine.ids.splice(index, 1);
      }
      return this.died = true;
    };

    Pengine.prototype.ask = function(query, options) {
      return this.send("ask((" + query + "), " + (Pengine.optionsToList(options)) + ")");
    };

    Pengine.prototype.next = function(n) {
      return this.send('next' + (n != null ? "(" + n + ")" : ''));
    };

    Pengine.prototype.stop = function() {
      return this.send('stop');
    };

    Pengine.prototype.respond = function(input) {
      return this.send("input((" + input + "))");
    };

    Pengine.prototype._pullResponse = function(id) {
      if (id == null) {
        id = this.id;
      }
      console.log(this.server + "/pull_response?id=" + id + "&format=" + this.format);
      return request({
        url: this.server + "/pull_response",
        method: "POST",
        json: true,
        form: {
          id: id,
          format: this.format
        },
        jar: this.cookieJar
      }, (function(_this) {
        return function() {
          var response;
          response = arguments[arguments.length - 1];
          return _this._processResponse(response);
        };
      })(this));
    };

    Pengine.prototype.abort = function() {
      request({
        url: this.server + "/abort?id=" + this.id + "&format=" + this.format,
        jar: this.cookieJar
      }, this._processResponse);
      return this;
    };

    Pengine.prototype.destroy = function() {
      if (!this.died) {
        return this.send("destroy");
      }
      return this;
    };

    Pengine.stringify = function(data, options) {
      var msg, serialize, strq;
      msg = "";
      strq = (options != null) && options.string === "atom" ? "'" : '"';
      serialize = function(data) {
        var first, i, j, p, ref, serializeKey, stringEscape;
        stringEscape = function(s, q) {
          var c, dec2unicode, j, len, result;
          dec2unicode = function(i) {
            switch (false) {
              case !((0 <= i && i <= 15)):
                return "\\u000" + (i.toString(16));
              case !((16 <= i && i <= 255)):
                return "\\u00" + (i.toString(16));
              case !((256 <= i && i <= 4095)):
                return "\\u0" + (i.toString(16));
              case !((4096 <= i && i <= 65535)):
                return "\\u" + (i.toString(16));
            }
          };
          result = q;
          for (j = 0, len = s.length; j < len; j++) {
            c = s[j];
            if (c >= ' ') {
              result += (function() {
                switch (false) {
                  case !"\\":
                    return "\\\\";
                  case !q:
                    return "\\" + q;
                  default:
                    return c;
                }
              })();
            } else {
              result += (function() {
                switch (false) {
                  case !"\n":
                    return "\\n";
                  case !"\r":
                    return "\\r";
                  case !"\t":
                    return "\\t";
                  case !"\b":
                    return "\\b";
                  case !"\f":
                    return "\\f";
                  default:
                    return dec2unicode(c.charCodeAt(0));
                }
              })();
            }
          }
          return result + q;
        };
        serializeKey = function(k) {
          if (k.match(/^\d+$/)) {
            msg += k;
          } else {
            msg += stringEscape(k, "'");
          }
          return true;
        };
        switch (typeof data) {
          case "number":
            msg += data;
            break;
          case "string":
            msg += stringEscape(data, strq);
            break;
          case "object":
            if (Array.isArray(data)) {
              msg += "[";
              for (i = j = 0, ref = data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                if (!serialize(data[i])) {
                  return false;
                }
                if (i + 1 < data.length) {
                  msg += ",";
                }
              }
              msg += "]";
            } else {
              first = true;
              msg += "js{";
              for (p in data) {
                if (!first) {
                  msg += ",";
                } else {
                  first = false;
                }
                if (!serializeKey(p)) {
                  return false;
                }
                msg += ":";
                if (!serialize(data[p])) {
                  return false;
                }
              }
              msg += "}";
            }
            break;
          default:
            return false;
        }
        return true;
      };
      if (serialize(data)) {
        return msg;
      }
    };

    return Pengine;

  })(events.EventEmitter);

  module.exports = (function(options) {
    return new Pengine(options);
  });

}).call(this);
